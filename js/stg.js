;//////////シューティング用汎用サブルーチン使用準備//////////
hsp.stg_set = () => {
  // テーブル作成
  hsp.sin = [
       0,    6,   12,   18,   25,   31,   37,   43,   49,   56,   62,   68,   74,   80,   86,   92,
      97,  103,  109,  115,  120,  126,  131,  136,  142,  147,  152,  157,  162,  167,  171,  176,
     181,  185,  189,  193,  197,  201,  205,  209,  212,  216,  219,  222,  225,  228,  231,  234,
     236,  238,  241,  243,  244,  246,  248,  249,  251,  252,  253,  254,  254,  255,  255,  255,
     256,  255,  255,  255,  254,  254,  253,  252,  251,  249,  248,  246,  244,  243,  241,  238,
     236,  234,  231,  228,  225,  222,  219,  216,  212,  209,  205,  201,  197,  193,  189,  185,
     181,  176,  171,  167,  162,  157,  152,  147,  142,  136,  131,  126,  120,  115,  109,  103,
      97,   92,   86,   80,   74,   68,   62,   56,   49,   43,   37,   31,   25,   18,   12,    6,
       0,   -6,  -12,  -18,  -25,  -31,  -37,  -43,  -49,  -56,  -62,  -68,  -74,  -80,  -86,  -92,
     -97, -103, -109, -115, -120, -126, -131, -136, -142, -147, -152, -157, -162, -167, -171, -176,
    -181, -185, -189, -193, -197, -201, -205, -209, -212, -216, -219, -222, -225, -228, -231, -234,
    -236, -238, -241, -243, -244, -246, -248, -249, -251, -252, -253, -254, -254, -255, -255, -255,
    -256, -255, -255, -255, -254, -254, -253, -252, -251, -249, -248, -246, -244, -243, -241, -238,
    -236, -234, -231, -228, -225, -222, -219, -216, -212, -209, -205, -201, -197, -193, -189, -185,
    -181, -176, -171, -167, -162, -157, -152, -147, -142, -136, -131, -126, -120, -115, -109, -103,
     -97,  -92,  -86,  -80,  -74,  -68,  -62,  -56,  -49,  -43,  -37,  -31,  -25,  -18,  -12,   -6,
  ];

  hsp.cos = [];
  for (let i = 0; i < 256; i++) {
    let r = i + 64 & 255;
    hsp.cos[i] = hsp.sin[r];
  }

  hsp.atan = hsp.dim(21, 21);
  for (let i = 0; i < 64; i++) {
    dx = hsp.cos[i];
    dy = hsp.sin[i];
    du = Math.max(dx, dy);
    dx = Math.floor(dx * 20 / du);
    dy = Math.floor(dy * 20 / du);
    hsp.atan[dx][dy] = i;
  }
  hsp.atan[20][0] = 0;
  hsp.atan[20][20] = 32;
  hsp.atan[0][20] = 64;

  // パラメータ用変数
  hsp.prm = hsp.dim(8);
};

;//////////方向を求める//////////
hsp.stg_dir = () => {
  // hsp.prm = [x0, y0, x1, y1]
  // (x0,y0) から (x1,y1) への向きを返す

  let dx = Math.abs(hsp.prm[2] - hsp.prm[0]);
  let dy = Math.abs(hsp.prm[3] - hsp.prm[1]);
  let mx = ((hsp.prm[2] - hsp.prm[0]) < 0);
  let my = ((hsp.prm[3] - hsp.prm[1]) < 0);
  let du = Math.max(dx, dy);
  if (du != 0) {
    dx = Math.floor(dx * 20 / du);
    dy = Math.floor(dy * 20 / du);
    hsp.r = hsp.atan[dx][dy];
    if (mx) { hsp.r = 128 - hsp.r & 255; }
    if (my) { hsp.r = 256 - hsp.r & 255; }
  }
};

;//////////領域の衝突判定//////////
hsp.stg_clash = () => {
  // prm = [x1, y1, x2, y2, x3, y3, x4, y4]
  // (x1,y1)(x2,y2)を対角線とする四角形と
  // (x3,y3)(x4,y4)を対角線とする四角形が
  // 重なっているときは1を返す
  hsp.r = 1;
  if (hsp.prm[0] > hsp.prm[6]) { hsp.r = 0; return; }
  if (hsp.prm[1] > hsp.prm[7]) { hsp.r = 0; return; }
  if (hsp.prm[2] < hsp.prm[4]) { hsp.r = 0; return; }
  if (hsp.prm[3] < hsp.prm[5]) { hsp.r = 0; return; }
};
